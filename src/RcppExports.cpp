// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEnsmallen.h>
#include <Rcpp.h>

using namespace Rcpp;

// logit_reg_lbfgs
arma::mat logit_reg_lbfgs(const arma::mat& X, const arma::vec& y);
RcppExport SEXP _snpcombineR_logit_reg_lbfgs(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(logit_reg_lbfgs(X, y));
    return rcpp_result_gen;
END_RCPP
}
// resample_genotype_data
arma::mat resample_genotype_data(arma::mat genotype_data, int n_resamples);
RcppExport SEXP _snpcombineR_resample_genotype_data(SEXP genotype_dataSEXP, SEXP n_resamplesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type genotype_data(genotype_dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_resamples(n_resamplesSEXP);
    rcpp_result_gen = Rcpp::wrap(resample_genotype_data(genotype_data, n_resamples));
    return rcpp_result_gen;
END_RCPP
}
// create_gwas_case_prob
arma::vec create_gwas_case_prob(arma::mat genotype_data, bool is_non_null, arma::uvec causal_snp_i, double causal_or, double case_rate);
RcppExport SEXP _snpcombineR_create_gwas_case_prob(SEXP genotype_dataSEXP, SEXP is_non_nullSEXP, SEXP causal_snp_iSEXP, SEXP causal_orSEXP, SEXP case_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type genotype_data(genotype_dataSEXP);
    Rcpp::traits::input_parameter< bool >::type is_non_null(is_non_nullSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type causal_snp_i(causal_snp_iSEXP);
    Rcpp::traits::input_parameter< double >::type causal_or(causal_orSEXP);
    Rcpp::traits::input_parameter< double >::type case_rate(case_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(create_gwas_case_prob(genotype_data, is_non_null, causal_snp_i, causal_or, case_rate));
    return rcpp_result_gen;
END_RCPP
}
// simulate_gene_gwas_data
arma::mat simulate_gene_gwas_data(arma::mat genotype_data, arma::vec case_prob);
RcppExport SEXP _snpcombineR_simulate_gene_gwas_data(SEXP genotype_dataSEXP, SEXP case_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type genotype_data(genotype_dataSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type case_prob(case_probSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_gene_gwas_data(genotype_data, case_prob));
    return rcpp_result_gen;
END_RCPP
}
// compute_cor_matrix
arma::mat compute_cor_matrix(arma::mat X);
RcppExport SEXP _snpcombineR_compute_cor_matrix(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_cor_matrix(X));
    return rcpp_result_gen;
END_RCPP
}
// compute_chol_matrix
arma::mat compute_chol_matrix(arma::mat X);
RcppExport SEXP _snpcombineR_compute_chol_matrix(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_chol_matrix(X));
    return rcpp_result_gen;
END_RCPP
}
// check_is_pd_cor_matrix
bool check_is_pd_cor_matrix(arma::vec eig_val, double eps);
RcppExport SEXP _snpcombineR_check_is_pd_cor_matrix(SEXP eig_valSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type eig_val(eig_valSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(check_is_pd_cor_matrix(eig_val, eps));
    return rcpp_result_gen;
END_RCPP
}
// make_pd_cor_matrix
arma::mat make_pd_cor_matrix(arma::mat cor_matrix, arma::vec eig_val, arma::mat eig_vec, double eps);
RcppExport SEXP _snpcombineR_make_pd_cor_matrix(SEXP cor_matrixSEXP, SEXP eig_valSEXP, SEXP eig_vecSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type cor_matrix(cor_matrixSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eig_val(eig_valSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type eig_vec(eig_vecSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(make_pd_cor_matrix(cor_matrix, eig_val, eig_vec, eps));
    return rcpp_result_gen;
END_RCPP
}
// force_pd_cor_matrix
arma::mat force_pd_cor_matrix(arma::mat cor_matrix, double eps);
RcppExport SEXP _snpcombineR_force_pd_cor_matrix(SEXP cor_matrixSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type cor_matrix(cor_matrixSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(force_pd_cor_matrix(cor_matrix, eps));
    return rcpp_result_gen;
END_RCPP
}
// compute_chol_cor_matrix
arma::mat compute_chol_cor_matrix(arma::mat cor_matrix, double eps);
RcppExport SEXP _snpcombineR_compute_chol_cor_matrix(SEXP cor_matrixSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type cor_matrix(cor_matrixSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_chol_cor_matrix(cor_matrix, eps));
    return rcpp_result_gen;
END_RCPP
}
// compute_brown_cov_sum
double compute_brown_cov_sum(arma::mat genotype_cor_mat);
RcppExport SEXP _snpcombineR_compute_brown_cov_sum(SEXP genotype_cor_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type genotype_cor_mat(genotype_cor_matSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_brown_cov_sum(genotype_cor_mat));
    return rcpp_result_gen;
END_RCPP
}
// compute_two_sided_cov_sum
double compute_two_sided_cov_sum(arma::mat genotype_cor_mat);
RcppExport SEXP _snpcombineR_compute_two_sided_cov_sum(SEXP genotype_cor_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type genotype_cor_mat(genotype_cor_matSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_two_sided_cov_sum(genotype_cor_mat));
    return rcpp_result_gen;
END_RCPP
}
// compute_magma
arma::mat compute_magma(arma::vec snp_pvals, arma::mat genotype_cor_mat);
RcppExport SEXP _snpcombineR_compute_magma(SEXP snp_pvalsSEXP, SEXP genotype_cor_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type snp_pvals(snp_pvalsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type genotype_cor_mat(genotype_cor_matSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_magma(snp_pvals, genotype_cor_mat));
    return rcpp_result_gen;
END_RCPP
}
// compute_browns
arma::mat compute_browns(arma::vec snp_pvals, arma::mat genotype_cor_mat, bool two_sided);
RcppExport SEXP _snpcombineR_compute_browns(SEXP snp_pvalsSEXP, SEXP genotype_cor_matSEXP, SEXP two_sidedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type snp_pvals(snp_pvalsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type genotype_cor_mat(genotype_cor_matSEXP);
    Rcpp::traits::input_parameter< bool >::type two_sided(two_sidedSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_browns(snp_pvals, genotype_cor_mat, two_sided));
    return rcpp_result_gen;
END_RCPP
}
// compute_sim_pvals
arma::mat compute_sim_pvals(arma::vec snp_pvals, arma::vec snp_zstats, arma::mat genotype_cor_mat, int n_blocks, int block_size, double eps);
RcppExport SEXP _snpcombineR_compute_sim_pvals(SEXP snp_pvalsSEXP, SEXP snp_zstatsSEXP, SEXP genotype_cor_matSEXP, SEXP n_blocksSEXP, SEXP block_sizeSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type snp_pvals(snp_pvalsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type snp_zstats(snp_zstatsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type genotype_cor_mat(genotype_cor_matSEXP);
    Rcpp::traits::input_parameter< int >::type n_blocks(n_blocksSEXP);
    Rcpp::traits::input_parameter< int >::type block_size(block_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_sim_pvals(snp_pvals, snp_zstats, genotype_cor_mat, n_blocks, block_size, eps));
    return rcpp_result_gen;
END_RCPP
}
// compute_gene_level_test
arma::mat compute_gene_level_test(arma::vec snp_pvals, arma::vec snp_zstats, arma::mat genotype_data, int sim_n_blocks, int sim_block_size, double eps);
RcppExport SEXP _snpcombineR_compute_gene_level_test(SEXP snp_pvalsSEXP, SEXP snp_zstatsSEXP, SEXP genotype_dataSEXP, SEXP sim_n_blocksSEXP, SEXP sim_block_sizeSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type snp_pvals(snp_pvalsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type snp_zstats(snp_zstatsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type genotype_data(genotype_dataSEXP);
    Rcpp::traits::input_parameter< int >::type sim_n_blocks(sim_n_blocksSEXP);
    Rcpp::traits::input_parameter< int >::type sim_block_size(sim_block_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_gene_level_test(snp_pvals, snp_zstats, genotype_data, sim_n_blocks, sim_block_size, eps));
    return rcpp_result_gen;
END_RCPP
}
// simulate_gene_level_stats
arma::mat simulate_gene_level_stats(arma::mat init_genotype_data, bool resample, int n_resamples, bool is_non_null, arma::uvec causal_snp_i, double causal_or, double case_rate, int sim_n_blocks, int sim_block_size, double eps);
RcppExport SEXP _snpcombineR_simulate_gene_level_stats(SEXP init_genotype_dataSEXP, SEXP resampleSEXP, SEXP n_resamplesSEXP, SEXP is_non_nullSEXP, SEXP causal_snp_iSEXP, SEXP causal_orSEXP, SEXP case_rateSEXP, SEXP sim_n_blocksSEXP, SEXP sim_block_sizeSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type init_genotype_data(init_genotype_dataSEXP);
    Rcpp::traits::input_parameter< bool >::type resample(resampleSEXP);
    Rcpp::traits::input_parameter< int >::type n_resamples(n_resamplesSEXP);
    Rcpp::traits::input_parameter< bool >::type is_non_null(is_non_nullSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type causal_snp_i(causal_snp_iSEXP);
    Rcpp::traits::input_parameter< double >::type causal_or(causal_orSEXP);
    Rcpp::traits::input_parameter< double >::type case_rate(case_rateSEXP);
    Rcpp::traits::input_parameter< int >::type sim_n_blocks(sim_n_blocksSEXP);
    Rcpp::traits::input_parameter< int >::type sim_block_size(sim_block_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_gene_level_stats(init_genotype_data, resample, n_resamples, is_non_null, causal_snp_i, causal_or, case_rate, sim_n_blocks, sim_block_size, eps));
    return rcpp_result_gen;
END_RCPP
}
// generate_sim_truth_data
arma::mat generate_sim_truth_data(arma::mat genotype_cor_matrix, int n_blocks, int block_size, double eps);
RcppExport SEXP _snpcombineR_generate_sim_truth_data(SEXP genotype_cor_matrixSEXP, SEXP n_blocksSEXP, SEXP block_sizeSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type genotype_cor_matrix(genotype_cor_matrixSEXP);
    Rcpp::traits::input_parameter< int >::type n_blocks(n_blocksSEXP);
    Rcpp::traits::input_parameter< int >::type block_size(block_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_sim_truth_data(genotype_cor_matrix, n_blocks, block_size, eps));
    return rcpp_result_gen;
END_RCPP
}
// compute_fixed_sim_pvals
arma::mat compute_fixed_sim_pvals(arma::vec snp_pvals, arma::vec snp_zstats, arma::mat sim_truth_matrix);
RcppExport SEXP _snpcombineR_compute_fixed_sim_pvals(SEXP snp_pvalsSEXP, SEXP snp_zstatsSEXP, SEXP sim_truth_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type snp_pvals(snp_pvalsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type snp_zstats(snp_zstatsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sim_truth_matrix(sim_truth_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_fixed_sim_pvals(snp_pvals, snp_zstats, sim_truth_matrix));
    return rcpp_result_gen;
END_RCPP
}
// compute_fixed_gene_level_test
arma::mat compute_fixed_gene_level_test(arma::mat sim_gwas_data, arma::mat sim_truth_matrix, arma::mat genotype_cor_matrix);
RcppExport SEXP _snpcombineR_compute_fixed_gene_level_test(SEXP sim_gwas_dataSEXP, SEXP sim_truth_matrixSEXP, SEXP genotype_cor_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type sim_gwas_data(sim_gwas_dataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sim_truth_matrix(sim_truth_matrixSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type genotype_cor_matrix(genotype_cor_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_fixed_gene_level_test(sim_gwas_data, sim_truth_matrix, genotype_cor_matrix));
    return rcpp_result_gen;
END_RCPP
}
// fixed_cor_gene_test_sim
arma::mat fixed_cor_gene_test_sim(arma::mat genotype_data, arma::mat genotype_cor_matrix, int n_gene_sims, bool is_non_null, arma::uvec causal_snp_i, double causal_or, double case_rate, int truth_sim_n_blocks, int truth_sim_block_size, int n_cores, double eps);
RcppExport SEXP _snpcombineR_fixed_cor_gene_test_sim(SEXP genotype_dataSEXP, SEXP genotype_cor_matrixSEXP, SEXP n_gene_simsSEXP, SEXP is_non_nullSEXP, SEXP causal_snp_iSEXP, SEXP causal_orSEXP, SEXP case_rateSEXP, SEXP truth_sim_n_blocksSEXP, SEXP truth_sim_block_sizeSEXP, SEXP n_coresSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type genotype_data(genotype_dataSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type genotype_cor_matrix(genotype_cor_matrixSEXP);
    Rcpp::traits::input_parameter< int >::type n_gene_sims(n_gene_simsSEXP);
    Rcpp::traits::input_parameter< bool >::type is_non_null(is_non_nullSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type causal_snp_i(causal_snp_iSEXP);
    Rcpp::traits::input_parameter< double >::type causal_or(causal_orSEXP);
    Rcpp::traits::input_parameter< double >::type case_rate(case_rateSEXP);
    Rcpp::traits::input_parameter< int >::type truth_sim_n_blocks(truth_sim_n_blocksSEXP);
    Rcpp::traits::input_parameter< int >::type truth_sim_block_size(truth_sim_block_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type n_cores(n_coresSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(fixed_cor_gene_test_sim(genotype_data, genotype_cor_matrix, n_gene_sims, is_non_null, causal_snp_i, causal_or, case_rate, truth_sim_n_blocks, truth_sim_block_size, n_cores, eps));
    return rcpp_result_gen;
END_RCPP
}
// resample_gene_test_sim
arma::mat resample_gene_test_sim(arma::mat genotype_data, int n_resamples, int n_gene_sims, bool is_non_null, arma::uvec causal_snp_i, double causal_or, double case_rate, int truth_sim_n_blocks, int truth_sim_block_size, int n_cores, double eps);
RcppExport SEXP _snpcombineR_resample_gene_test_sim(SEXP genotype_dataSEXP, SEXP n_resamplesSEXP, SEXP n_gene_simsSEXP, SEXP is_non_nullSEXP, SEXP causal_snp_iSEXP, SEXP causal_orSEXP, SEXP case_rateSEXP, SEXP truth_sim_n_blocksSEXP, SEXP truth_sim_block_sizeSEXP, SEXP n_coresSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type genotype_data(genotype_dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_resamples(n_resamplesSEXP);
    Rcpp::traits::input_parameter< int >::type n_gene_sims(n_gene_simsSEXP);
    Rcpp::traits::input_parameter< bool >::type is_non_null(is_non_nullSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type causal_snp_i(causal_snp_iSEXP);
    Rcpp::traits::input_parameter< double >::type causal_or(causal_orSEXP);
    Rcpp::traits::input_parameter< double >::type case_rate(case_rateSEXP);
    Rcpp::traits::input_parameter< int >::type truth_sim_n_blocks(truth_sim_n_blocksSEXP);
    Rcpp::traits::input_parameter< int >::type truth_sim_block_size(truth_sim_block_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type n_cores(n_coresSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(resample_gene_test_sim(genotype_data, n_resamples, n_gene_sims, is_non_null, causal_snp_i, causal_or, case_rate, truth_sim_n_blocks, truth_sim_block_size, n_cores, eps));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_snpcombineR_logit_reg_lbfgs", (DL_FUNC) &_snpcombineR_logit_reg_lbfgs, 2},
    {"_snpcombineR_resample_genotype_data", (DL_FUNC) &_snpcombineR_resample_genotype_data, 2},
    {"_snpcombineR_create_gwas_case_prob", (DL_FUNC) &_snpcombineR_create_gwas_case_prob, 5},
    {"_snpcombineR_simulate_gene_gwas_data", (DL_FUNC) &_snpcombineR_simulate_gene_gwas_data, 2},
    {"_snpcombineR_compute_cor_matrix", (DL_FUNC) &_snpcombineR_compute_cor_matrix, 1},
    {"_snpcombineR_compute_chol_matrix", (DL_FUNC) &_snpcombineR_compute_chol_matrix, 1},
    {"_snpcombineR_check_is_pd_cor_matrix", (DL_FUNC) &_snpcombineR_check_is_pd_cor_matrix, 2},
    {"_snpcombineR_make_pd_cor_matrix", (DL_FUNC) &_snpcombineR_make_pd_cor_matrix, 4},
    {"_snpcombineR_force_pd_cor_matrix", (DL_FUNC) &_snpcombineR_force_pd_cor_matrix, 2},
    {"_snpcombineR_compute_chol_cor_matrix", (DL_FUNC) &_snpcombineR_compute_chol_cor_matrix, 2},
    {"_snpcombineR_compute_brown_cov_sum", (DL_FUNC) &_snpcombineR_compute_brown_cov_sum, 1},
    {"_snpcombineR_compute_two_sided_cov_sum", (DL_FUNC) &_snpcombineR_compute_two_sided_cov_sum, 1},
    {"_snpcombineR_compute_magma", (DL_FUNC) &_snpcombineR_compute_magma, 2},
    {"_snpcombineR_compute_browns", (DL_FUNC) &_snpcombineR_compute_browns, 3},
    {"_snpcombineR_compute_sim_pvals", (DL_FUNC) &_snpcombineR_compute_sim_pvals, 6},
    {"_snpcombineR_compute_gene_level_test", (DL_FUNC) &_snpcombineR_compute_gene_level_test, 6},
    {"_snpcombineR_simulate_gene_level_stats", (DL_FUNC) &_snpcombineR_simulate_gene_level_stats, 10},
    {"_snpcombineR_generate_sim_truth_data", (DL_FUNC) &_snpcombineR_generate_sim_truth_data, 4},
    {"_snpcombineR_compute_fixed_sim_pvals", (DL_FUNC) &_snpcombineR_compute_fixed_sim_pvals, 3},
    {"_snpcombineR_compute_fixed_gene_level_test", (DL_FUNC) &_snpcombineR_compute_fixed_gene_level_test, 3},
    {"_snpcombineR_fixed_cor_gene_test_sim", (DL_FUNC) &_snpcombineR_fixed_cor_gene_test_sim, 11},
    {"_snpcombineR_resample_gene_test_sim", (DL_FUNC) &_snpcombineR_resample_gene_test_sim, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_snpcombineR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
